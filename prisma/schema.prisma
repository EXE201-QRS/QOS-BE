generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String
  name               String         @db.VarChar(500)
  password           String         @db.VarChar(500)
  phoneNumber        String         @db.VarChar(50)
  avatar             String?        @db.VarChar(1000)
  status             UserStatus     @default(INACTIVE)
  roleId             Int
  role               Role           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  devices            Device[] // Liên kết 1-n với Device
  refreshTokens      RefreshToken[]
  createdPermissions Permission[]   @relation("PermissionCreatedBy")
  updatedPermissions Permission[]   @relation("PermissionUpdatedBy")
  deletedPermissions Permission[]   @relation("PermissionDeletedBy")
  createdRoles       Role[]         @relation("RoleCreatedBy")
  updatedRoles       Role[]         @relation("RoleUpdatedBy")
  deletedRoles       Role[]         @relation("RoleDeletedBy")
  createdCategories  Category[]     @relation("CategoryCreatedBy")
  updatedCategories  Category[]     @relation("CategoryUpdatedBy")
  deletedCategories  Category[]     @relation("CategoryDeletedBy")
  createdDishes      Dish[]         @relation("DishCreatedBy")
  updatedDishes      Dish[]         @relation("DishUpdatedBy")
  deletedDishes      Dish[]         @relation("DishDeletedBy")
  createdTables      Table[]        @relation("TableCreatedBy")
  updatedTables      Table[]        @relation("TableUpdatedBy")
  deletedTables      Table[]        @relation("TableDeletedBy")

  // 1 user có thể tạo ra nhiều user khác
  // 1 user chỉ có thể được tạo ra bởi 1 user khác
  // Tự quan hệ 1-n
  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")
  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, code, type])
  @@index([expiresAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt // Thay updatedAt bằng lastActive cho ý nghĩa rõ hơn
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true) // Trạng thái thiết bị (đang login hay đã logout)
  refreshTokens RefreshToken[] // Liên kết 1-n với RefreshToken
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deviceId  Int // Foreign key tới Device
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  module      String     @default("") @db.VarChar(500)
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String @unique @db.VarChar(500)
  dishes Dish[] // Liên kết 1-n với Dish

  createdById Int?
  createdBy   User? @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("CategoryDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Dish {
  id          Int        @id @default(autoincrement())
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name        String     @unique @db.VarChar(500)
  price       Float      @default(0.0)
  description String     @default("") @db.VarChar(1000)
  image       String     @default("") @db.VarChar(1000)
  status      DishStatus @default(INACTIVE)

  dishSnapshots DishSnapshot[]

  createdById Int?
  createdBy   User? @relation("DishCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("DishUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("DishDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model DishSnapshot {
  id          Int        @id @default(autoincrement())
  dishId      Int
  dish        Dish       @relation(fields: [dishId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name        String     @db.VarChar(500)
  price       Float      @default(0.0)
  description String     @default("") @db.VarChar(1000)
  image       String     @default("") @db.VarChar(1000)
  status      DishStatus @default(INACTIVE)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Table {
  id       Int         @id @default(autoincrement())
  number   Int
  capacity Int         @default(0)
  status   TableStatus @default(UNAVAILABLE)
  token    String      @unique @db.VarChar(500)

  createdById Int?
  createdBy   User? @relation("TableCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("TableUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("TableDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Guest {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(500)
  tableNumber Int

  refreshToken          String?   @db.VarChar(500)
  refreshTokenExpiresAt DateTime?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
  @@index([refreshTokenExpiresAt])
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  CLEANING
  UNAVAILABLE
}

enum DishStatus {
  ACTIVE
  INACTIVE
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum MediaType {
  IMAGE
  VIDEO
}
